<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_autocar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_nn_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITIALIZE
event_inherited();

//=== Object Properties
//Properties
    move_speed = 5;
    turn_speed = 20;
    real_msp = 0;
    
    image_angle = 90;

    last_moved_timing = 0;    
    sens_len_c = 90;
    sens_len_s = 60;
    sens_ang_c = 10;
    sens_ang_s = 50;
    
//===== Nerual Network
    nn_initialize(tanh, 0.2);
    
//===== Start
    nn_create_network(4, 5, 2);
    nn_random_weight();
    nn_random_bias();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RUN
event_inherited();

if(stop) exit;
    event_user(1); //feedforward
    
//Perform action:
    image_angle += turn_speed*nn_get_output(0);
    
//Move
    real_msp = move_speed;
    x += lengthdir_x(real_msp, image_angle);
    y += lengthdir_y(real_msp, image_angle); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall_hex">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision

//Stop
stop = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FEED FORWARD

if(stop) exit;

//Insert inputs:
    var _in1 = collision_distance(x, y, x+lengthdir_x(sens_len_c,image_angle+sens_ang_c), y+lengthdir_y(sens_len_c,image_angle+sens_ang_c), obj_wall_hex);
    var _in2 = collision_distance(x, y, x+lengthdir_x(sens_len_c,image_angle-sens_ang_c), y+lengthdir_y(sens_len_c,image_angle-sens_ang_c), obj_wall_hex);
    var _in3 = collision_distance(x, y, x+lengthdir_x(sens_len_s,image_angle+sens_ang_s), y+lengthdir_y(sens_len_s,image_angle+sens_ang_s), obj_wall_hex);
    var _in4 = collision_distance(x, y, x+lengthdir_x(sens_len_s,image_angle-sens_ang_s), y+lengthdir_y(sens_len_s,image_angle-sens_ang_s), obj_wall_hex);
    nn_set_input(0, _in1, 0, 1);
    nn_set_input(1, _in2, 0, 1);
    nn_set_input(2, _in3, 0, 1);
    nn_set_input(3, _in4, 0, 1);

    
//Feed forward:
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COMPUTE FITNESS

if(stop) exit;

//Set up how you want to compute fitness
    last_moved_timing += 1;
    
    if(distance_to_point(xstart, ystart) &gt; 72){
        fitness += real_msp;
    } else {
        last_moved_timing++;
    }
    
    if(fitness &lt; 1 &amp;&amp; last_moved_timing &gt; 90){ //Stop if we are circling on same position
        stop = true;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
