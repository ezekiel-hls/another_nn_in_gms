<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shoot_defend</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>entity_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITIALIZE
event_inherited();

//===== Nerual Network
    nn_initialize(lkrelu, 0.4);
    
//===== Start
    nn_create_network(4, 6, 5);
    nn_randomize_weight();
    nn_randomize_bias();
    
//=== Object Properties
//Properties
    move_speed = 5;
    spd = 0;
    dir = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OUTPUT
event_inherited();
if(stop) exit;

//Perform action:
    var left    = nn_get_output(0);
    var right   = nn_get_output(1);
    var up      = nn_get_output(2);
    var down    = nn_get_output(3);
    
//Move
    real_speed = min(move_speed, move_speed*nn_get_output(4));
    
    dir = point_direction(0, 0, left-right, down-up);
    spd = real_speed;
    
    x += lengthdir_x(spd, dir);
    y += lengthdir_y(spd, dir);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COMPUTE FITNESS
event_inherited();
if(stop) exit;


    fitness += -point_distance(x, y, obj_player.x, obj_player.y)*0.01;
//fitness += 1;

/*if(_dist &gt; 200){
    fitness -= 10;
    stop = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INPUT
event_inherited();
if(stop) exit;

//Insert inputs:
    /*var _rad = 64;
    var _obj = obj_spaceship_bullet;
    var _sep = 48;
    var _ind = 0;
    for(var i=-1; i&lt;2; i++){
        for(var j=-1; j&lt;2; j++){
            if(!(j=0 &amp;&amp; i=0)){
                var _blt = collision_circle(x-_sep*i, y-_sep*j,_rad,obj_spaceship_bullet,false,false);
                nn_set_input(_ind, _blt, 0, 1);
                _ind++;
            }
        }
    }*/

    nn_set_input(0, point_distance(x,y, obj_player.x, obj_player.y), 0, room_width);
    nn_set_input(1, point_direction(x,y, obj_player.x, obj_player.y), 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    fitness -= 10;
    stop = true;
    image_blend = c_dkgray;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
