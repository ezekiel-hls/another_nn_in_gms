<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Game
randomize();
show_debug_overlay(true);

//Training vars
    train_mode = false;
    train_delay = room_speed*3;
    winning_fitness = -99999;
    winning_data_set = ds_list_create();
    winning_data_set[| 1] = ds_grid_create(3, 2);
    winning_data_set[| 2] = ds_grid_create(3, 3);
    winning_data_set[| 3] = ds_grid_create(2, 3)
    
    global.entity_target_object = obj_ball;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create entities

var xx = room_width/2;
var yy = room_height/2;

var i = 0;
while(i &lt; 15){
    entities[i] = instance_create(xx, yy, obj_entity);
    i++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Train

if(train_mode){
    event_user(0);
}
    alarm[0] = train_delay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run

//Control output of neural network
    with(Entity){
        ///Run
        var t = global.entity_target_object; //Target object
        inputs[0] = normalize(angle_difference(image_angle, point_direction(x, y, t.x, t.y)), 0, 180);
        inputs[1] = normalize(point_distance(x, y, t.x, t.y), 0, room_height);
        
        output = nn_feed_forward(inputs);
    }
    
    var _entities_fit = entities[array_length_1d(entities)-1];
    with(_entities_fit){
        show_debug_message("in0: "+string(inputs[0])+" in1: "+string(inputs[1]));
        show_debug_message("ou0: "+string(output[# 0,0])+" ou1: "+string(output[# 1,0]));
    }
    
//Train    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SORT ENTITIES BASED ON FITNESS

//Bubble Sort
    var _entities_count = array_length_1d(entities);
    var _temp = noone;    
    for(var i=0; i&lt;_entities_count; i++){
        var _j_max = _entities_count-i;
        for(var j=0; j&lt;_j_max-1; j++){
            if(entities[j].fitness &gt; entities[j+1].fitness){
                _temp = entities[i];
                
                entities[i] = entities[j+1]; //Swap
                entities[j+1] = _temp;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TRAIN ENTITIES


    with(Entity){
        if(!protected)
            instance_destroy();
    }
    
    with(Entity){
        var i = instance_create(x, y, id);
    }    
/*

//Compute fitness
    with(Entity){
        fitness = nn_get_fitness();
    }
    
//Sort
    event_user(1);
    
//Get best fit entity
    var _entities_fit = entities[array_length_1d(entities)-1];
    
    if(_entities_fit.fitness &gt; winning_fitness){
        ds_list_copy(winning_data_set, _entities_fit.hidden_layer_w);
        winning_fitness = _entities_fit.fitness;
    }
    show_debug_message("Max fitness "+string(winning_fitness));

//Copy the best fit entity
    var _entities_count = floor(array_length_1d(entities)*0.5);
    for(var i=0; i&lt;_entities_count; i++){
        nn_copy_network_weight(winning_data_set, entities[i].hidden_layer_w);
        
        nn_mutate(entities[i].hidden_layer_w); //Mutate data set
    }
    
//Reset
    var xx = room_width/2;
    var yy = room_height/2;
    with(Entity){       
        image_angle = 0;
        x = xx;
        y = yy;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(10, 10, "generation: "+string(winning_fitness));
draw_text(10, 30, "best fitness: "+string(winning_fitness));
draw_text(10, 50, "best dataset: "+string(winning_fitness));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
