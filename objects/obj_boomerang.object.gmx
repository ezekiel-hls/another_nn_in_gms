<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize object


//=== Object Properties
//Properties
    move_speed = random_range(2,4);
    turn_speed = 7;
    target = obj_ball;
    marked = false;
    
//===== Nerual Network
    mutation_rate = 0.1;
    output_bias_mutate_rate = 0.05;
    bias_mutate_rate = 0.1; //bias of neurons
    activation_function = tanh;
    
//Fitness
    fitness = 0;
    
//===== Start
    nn_create_network(1, 2, 1);
    nn_random_weight();
    nn_random_bias();
    
    alarm[2] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COMPUTE FITNESS
    event_user(2);
    alarm[2] = 10;
    
//Show debug info    
    if(marked){
        if(array_length_1d(inputs) == 1)
            show_debug_message("in0: "+string(inputs[0]));
        else
            show_debug_message("in0: "+string(inputs[0])+" in1: "+string(inputs[1]));
        
        show_debug_message("ou0: "+string(outputs[0])+" fitness: "+string(fitness));
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run

//Insert inputs
    inputs[0] = angle_difference(image_angle, point_direction(x, y, target.x, target.y)); //normalize(angle_difference(image_angle, point_direction(x, y, target.x, target.y)), 0, 180);
    //inputs[1] = normalize(point_distance(x, y, target.x, target.y), 0, room_width);
    
//Feed forward
    nn_feed_forward();
    
//Perform action
    //Turn
        var left = 0, right = 0;
        image_angle += turn_speed*(outputs[0]);
    
    //Move
        x += lengthdir_x(move_speed, image_angle);
        y += lengthdir_y(move_speed, image_angle);    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OBJECT MARKED

with(object_index){
    marked = false;
    depth = 0;
}

//Create visualization of neural network
    nn_visual_destroy();
    nn_visual_create(450, 50, inputs, weights, output_weights);
    
marked = true;
image_blend = c_white;
depth = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COMPUTE FITNESS

//Compute fitness
    var _dist = distance_to_object(obj_ball);
    fitness = max(normalize(_dist, 40, 0), -10.00);

//Change color based on fitness
    if(!marked){
        image_blend = make_colour_hsv(clamp(fitness*8+80, -100, 100), 220, 200);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self
draw_self();

//Draw text if we are marked
    if(marked){
        var _dir = point_direction(x, y, target.x, target.y);
        draw_text(x, y+10, angle_difference(image_angle, _dir));
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
