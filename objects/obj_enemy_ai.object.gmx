<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_autocar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>entity_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITIALIZE

//===== Nerual Network
    nn_initialize(sigmoid, 0.4);
    
//===== Start
    nn_create_network(6, 7, 4);
    nn_randomize_weight();
    nn_randomize_bias();

//=== Object Properties
//Constant
    IDLE = 0;
    PATROL = 1;
    ATTACK = 2;
    LOOT = 3;
    
//Properties
    color_hue = irandom(255);
    my_color = make_colour_hsv(color_hue, 200, 250);

    move_speed = 5;
    
    attack_cd = 20;
    attack_cd_counter = 0;
    attack_radius = 200;
    
    loot_radius = 200;
    
    energy_max = 100;
    energy_consumption = 0;
    energy = energy_max;
    
    state = 0;
    state_previous = -1;
    state_duration = 0;
    state_oscillate = 0;
    state_duration_max = 300;

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//States
    if(!stop)
    switch(state){
        case(IDLE):
            speed = 0;
            if(state_duration &gt; 150){
                fitness -= 10;
                stop = true;
            } else if(state_duration &gt; 60){
                fitness -= 1;
            }
            energy_consumption = 0;
            break;
            
        case(PATROL):
            speed = move_speed;
            if(state_duration % 20 = 0){
                direction = irandom(360);
            }

            energy_consumption = 0.5;
            energy -= energy_consumption;
            break;
            
        case(ATTACK):
            enemy_ai_state_attack();
            break;
            
        case(LOOT):
            enemy_ai_state_loot();
            break;
    }

//Cooldown
    if(attack_cd_counter &gt;= 0){
        attack_cd_counter--;
    }


//State Duration
    if(state != state_previous){
        state_previous = state;
        state_duration = 0;
    } else {
        state_duration++;
    }
    
//Stop
    if(stop){
        image_blend = c_dkgray;
        speed = 0;
    } else {
        image_blend = my_color;
    }
    
//Energy    
    if(energy &lt;= 0){
        stop = true;
        switch(state){            
            case(ATTACK):
                fitness -= 40;
                break;
                
            case(LOOT):
                fitness -= 20;
                break;
        }
    } else {
        energy -= energy_consumption;
    }
    
//Control Sprite    
    image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OUTPUT
event_inherited();
if(stop) exit;

//Perform action:
    var next_state = state;
    var next_state_strength = -10000;
    
    for(var i=0; i&lt;4; i++){
        if(nn_get_output(i) &gt; next_state_strength){
            next_state = i;
            next_state_strength = nn_get_output(i);
        }
    }
    
    //Prevent Oscillation
    if(state_duration &gt; 5){
        state = next_state;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COMPUTE FITNESS
event_inherited();
if(stop) exit;

//Set up how you want to compute fitness
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INPUT
event_inherited();
if(stop) exit;

//Insert inputs:
    //Distance to player
    var _dist = distance_to_object(obj_player);
    if(_dist &lt; attack_radius) nn_set_input(0, _dist, 0, attack_radius);
    else nn_set_input(0, 1, 0, 1)
    
    //Distance to loot
    _dist = distance_to_object(obj_food);
    if(_dist &lt; loot_radius) nn_set_input(1, _dist, 0, loot_radius);
    else nn_set_input(1, 1, 0, 1);
    
    //Energy
    nn_set_input(2, energy, 0, energy_max);
    nn_set_input(3, energy_consumption, -2, 2);

    //Player HP
    //nn_set_input(3, 0, 0, 1)
        
    //Cooldown
    nn_set_input(4, attack_cd_counter, 0, attack_cd);
    
    //State delay
    nn_set_input(5, state_duration, 0, state_duration_max);
    
    //State
    nn_set_input(6, state, 0, LOOT);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_text(x, y, state);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
