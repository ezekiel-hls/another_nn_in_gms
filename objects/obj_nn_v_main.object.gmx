<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Visualization 

//Draw vars
    start_x = x;
    start_y = y;
    spacing_x = 64;
    spacing_y = 32;

//Pass in all the weights first!
    i_weight[0] = 0; 
    h_weight[0, 0] = 0;
    o_weight[0, 0] = 0;
    
    i_ins[0] = -1;
    h_ins[0] = -1;
    o_ins[0] = -1;    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CREATE NODES

var xx = start_x;
var yy = start_y;

//Input layer nodes
    for(var i=0; i&lt;array_length_1d(i_weight); i++){
        i_ins[i] = instance_create(xx, yy, obj_nn_v_node);        
        yy += spacing_y;
    }
    xx += spacing_x;
    yy = start_y;

//Hidden Layer nodes    
    for(var i=0; i&lt;array_height_2d(h_weight); i++){
        h_ins[i] = instance_create(xx, yy, obj_nn_v_node);
        h_ins[i].previous = i_ins;
        h_ins[i].value = array_2d_to_1d(h_weight, i);
        yy += spacing_y;
    }
    xx += spacing_x;
    yy = start_y;
    
//Output Layer nodes    
    for(var i=0; i&lt;array_height_2d(o_weight); i++){
        o_ins[i] = instance_create(xx, yy, obj_nn_v_node);
        o_ins[i].previous = h_ins;
        o_ins[i].value = array_2d_to_1d(o_weight, i);
        yy += spacing_y;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HOVER
with(obj_nn_v_node){
    if(previous != -1)
        if(position_meeting(mouse_x, mouse_y, id)){
            var str = "";
            for(i = 0; i&lt;array_length_1d(value); i++){
                str += "["+string(value[i])+"]#";
            }
            draw_text(mouse_x+4, mouse_y+4, str);
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
